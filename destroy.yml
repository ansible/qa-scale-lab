---
- hosts: localhost
  gather_facts: false
  connection: local
  vars_files:
  - vars/defaults.yml
  - vars/vars.yml
  module_defaults:
    group/aws:
      profile: '{{ aws_profile }}'
      region: '{{ aws_region }}'
  tasks:
  - cloudformation_facts:
      stack_name: static-ecs-cluster
  - set_fact:
      stack_exists: "{{
          ansible_facts.cloudformation['static-ecs-cluster'] |
          default({'stack_outputs': {}}) |
          json_query('stack_outputs.Cluster') |
          ternary(true, false)
      }}"
  - ecs_service_info:
      details: true
      cluster: "{{ ansible_facts.cloudformation['static-ecs-cluster'].stack_outputs.Cluster }}"
    register: service_info
    when: stack_exists
  - set_fact:
      desired_count: "{{ service_info | json_query('services[*].desiredCount') | list | max }}"
    when: service_info is defined and service_info.services is defined
  - set_fact:
      scale_down: "{{ (desired_count is undefined or desired_count == 0) | ternary(false, true) }}"
  # We can get into a chicken-egg state where the task definitions don't exist but the ECS service does
  # To be able to scale down and then delete it, we'll need to ensure the task definition exists first
  - ecs_taskdefinition_info:
      task_definition: ssh-ansible-targets
    register: ssh_targets_taskdef_exists
  - ecs_taskdefinition_info:
      task_definition: ios-ansible-targets
    register: ios_targets_taskdef_exists
  - ecs_taskdefinition:
      network_mode: bridge
      family: '{{ item.family }}'
      state: present
      containers:
      - name: '{{ item.name }}'
        image: '{{ item.image }}'
        memoryReservation: 40
        portMappings:
          - containerPort: 22
            hostPort: 0
            protocol: tcp
    when:
      - scale_down
      - 'not "task_definition" in item.info'
    loop:
      - name: ssh-target
        image: '{{ repo_url }}:cent-ssh'
        family: ssh-ansible-targets
        info: '{{ ssh_targets_taskdef_exists }}'
      - name: ios-target
        image: '{{ repo_url }}:cisco-ios-sim'
        family: ios-ansible-targets
        info: '{{ ios_targets_taskdef_exists }}'
  - ecs_service:
      state: present
      cluster: "{{ cloudformation['static-ecs-cluster'].stack_outputs.Cluster }}"
      name: ssh-targets-{{ item + 1 }}
      deployment_configuration:
        maximum_percent: 150
        minimum_healthy_percent: 10
      desired_count: 0
      task_definition: ssh-ansible-targets
      placement_strategy:
        - field: instanceId
          type: spread
    loop: '{{ range(10) | list }}'
    when:
      - scale_down
      - stack_exists
  - ecs_service:
      state: present
      cluster: "{{ cloudformation['static-ecs-cluster'].stack_outputs.Cluster }}"
      name: cisco-ios-targets-{{ item + 1}}
      deployment_configuration:
        maximum_percent: 150
        minimum_healthy_percent: 10
      desired_count: 0
      task_definition: ios-ansible-targets
      placement_strategy:
        - field: instanceId
          type: spread
    loop: '{{ range(10) | list }}'
    when:
      - scale_down
      - stack_exists
  - name: Scale instances down to zero
    cloudformation:
      template: ./cfn/ecs-static-size-cluster.yaml
      stack_name: static-ecs-cluster
      template_parameters:
        ParentVPCStack: scale-test-vpc
        SubnetsReach: Public
        InstanceType: c5.4xlarge
        SpotBidPrice: 0.20
        MaxSize: 8
        DesiredCapacity: 0
        MinSize: 0
        KeyName: '{{ key_name | default("") }}'
    when: stack_exists
    register: result
    failed_when:
      - 'not result is success'
      - 'not "DELETE_FAILED state" in result.msg'
      - 'not "ROLLBACK_COMPLETE state" in result.msg'
  - ecs_service:
      state: absent
      cluster: "{{ cloudformation['static-ecs-cluster'].stack_outputs.Cluster }}"
      name: ssh-targets-{{ item + 1 }}
      deployment_configuration:
        maximum_percent: 150
        minimum_healthy_percent: 10
      desired_count: 0
      task_definition: ssh-ansible-targets
      placement_strategy:
        - field: instanceId
          type: spread
    loop: '{{ range(10) | list }}'
    when: stack_exists
  - ecs_service:
      state: absent
      cluster: "{{ cloudformation['static-ecs-cluster'].stack_outputs.Cluster }}"
      name: cisco-ios-targets-{{ item + 1}}
      deployment_configuration:
        maximum_percent: 150
        minimum_healthy_percent: 10
      desired_count: 0
      task_definition: ios-ansible-targets
      placement_strategy:
        - field: instanceId
          type: spread
    loop: '{{ range(10) | list }}'
    when: stack_exists
  - ecs_taskdefinition_facts:
      task_definition: ssh-ansible-targets
    register: td
  - ecs_taskdefinition:
      arn: '{{ td.task_definition_arn }}'
      family: ssh-ansible-targets
      state: absent
    when: td.task_definition_arn is defined
  - ecs_taskdefinition_facts:
      task_definition: ios-ansible-targets
    register: td
  - ecs_taskdefinition:
      arn: '{{ td.task_definition_arn }}'
      family: ios-ansible-targets
      state: absent
    when: td.task_definition_arn is defined
  - cloudformation:
      template: ./cfn/ecs-static-size-cluster.yaml
      state: absent
      stack_name: static-ecs-cluster
  - cloudformation:
      template: ./cfn/vpc-2azs.yaml
      state: absent
      stack_name: scale-test-vpc
      template_parameters:
        ClassB: 99
